spring:
  servlet:
    multipart:
      max-file-size: 10MB # 요청한 파일 한 개의 크기
      max-request-size: 10MB # 요청한 파일 전체의 크기

  cache:
    type: redis
  redis:
    host: ${redis.host}
    port: ${redis.port}

  security:
    oauth2:
      client:
        registration:
          instagram:
            client-id: ${instagram.client.id}
            client-secret: ${instagram.client.secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/instagram"
            scope: user_profile, user_media
            authorization-grant-type: authorization_code
            client-name: Instagram
        provider:
          instagram:
            authorization-uri: https://api.instagram.com/oauth/authorize
            long-authorization-uri: https://graph.instagram.com/access_token
            token-uri: https://api.instagram.com/oauth/access_token
            user-info-uri: https://graph.instagram.com/me

jwt:
  token:
    secret-key: ${jwt.secret}
  access:
    expiration: 31536000000 # 365일
    header: Authorization
  refresh:
    expiration: 1209600000 # 2주
    header: Authorization-refresh

cloud:
  aws:
    s3:
      bucket: ${s3.bucket}
    credentials:
      access-key: ${s3.access.key}
      secret-key: ${s3.secret.key}
    region:
      static: ap-northeast-2
      auto: false
    stack:
      auto: false

logging:
  level:
    root: info
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error

server:
  ssl:
    enabled: true
    key-store: dev.key
    key-store-password: 123456
    key-store-type: PKCS12
    key-alias: bns-ssl

---

spring:
  profiles:
    active: dev

---

spring:
  profiles:
    active: prod